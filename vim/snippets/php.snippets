snippet ar
	// Query
	$${1:results} = get_instance()->db
		-> from ('exp_${2:}')
		-> where ('${3:}', $${4:})${5}
		-> select (
			'${6:}'
		)
		-> get() -> result_array();

	// No results?
	if ( empty($$1) )
	{
		throw new Exception ("${7:No results.}");
	}
snippet field
	<label for="${1:}">${2:}</label>
	<input type="${3:text}" id="$1" class="$4${5:}" name="$1" ${4:required} value="<?=set_value('$1')?>" />
snippet php
	<?php
	${1}
	?>
snippet try
	try
	{
		${1}
	}
	catch (Exception $e)
	{
		${2}
	}
snippet ec
	echo "${1:string}"${2};
snippet dump
	echo "<pre>"; var_dump($${1:var}); echo "</pre>";${2}
snippet print
	echo "<pre>"; print_r($${1:var}); echo "</pre>";${2}
snippet req
	require_once(realpath(dirname(__FILE__)."/${1:file}"));${2}
snippet table
    <table>
        <thead>
            <tr> <th></th> </tr>
        </thead>
        <tbody>
            <tr> <td></td> </tr>
        </tbody>
    </table>
snippet div
	<div id="${1}">
		${2}
	</div>
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	 */${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 */${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 */
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 */
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 */${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 */${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 */
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 */
	class ${2:ClassName}
	{
		/**
		 * Constructor.${3}
		 */
		function ${4:__construct}(${5:argument})
		{
			${6}
		}
	}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1})
	{
		${2}
	}
snippet ife
	if (${1})
	{
		${2}
	}
	else
	{
		${3}
	}
	${4}
snippet else
	else
	{
		${1}
	}
snippet elseif
	elseif (${1})
	{
		${2}
	}
# Tertiary conditional
snippet t
	${1:retVal} = (${2:condition}) ?
		${3:a} :
		${4:b};${5}
snippet switch
	switch ($${1:variable})
	{
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++})
	{
		${4}
	}
snippet foreach
	foreach ($${1:array} as $${2:value})
	{
		${3}
	}
snippet fun
	/**
	 * ${1}
	 */
	${2:public }function ${3:FunctionName} (${4})
	{
		${5}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
